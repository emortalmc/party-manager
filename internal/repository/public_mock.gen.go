// Code generated by MockGen. DO NOT EDIT.
// Source: internal/repository/public.go

// Package repository is a generated GoMock package.
package repository

import (
	context "context"
	model "party-manager/internal/repository/model"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
	primitive "go.mongodb.org/mongo-driver/bson/primitive"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// AddPartyMember mocks base method.
func (m *MockRepository) AddPartyMember(ctx context.Context, partyId primitive.ObjectID, member *model.PartyMember) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddPartyMember", ctx, partyId, member)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddPartyMember indicates an expected call of AddPartyMember.
func (mr *MockRepositoryMockRecorder) AddPartyMember(ctx, partyId, member interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPartyMember", reflect.TypeOf((*MockRepository)(nil).AddPartyMember), ctx, partyId, member)
}

// CreateParty mocks base method.
func (m *MockRepository) CreateParty(ctx context.Context, party *model.Party) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateParty", ctx, party)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateParty indicates an expected call of CreateParty.
func (mr *MockRepositoryMockRecorder) CreateParty(ctx, party interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateParty", reflect.TypeOf((*MockRepository)(nil).CreateParty), ctx, party)
}

// CreatePartyInvite mocks base method.
func (m *MockRepository) CreatePartyInvite(ctx context.Context, invite *model.PartyInvite) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePartyInvite", ctx, invite)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreatePartyInvite indicates an expected call of CreatePartyInvite.
func (mr *MockRepositoryMockRecorder) CreatePartyInvite(ctx, invite interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePartyInvite", reflect.TypeOf((*MockRepository)(nil).CreatePartyInvite), ctx, invite)
}

// DeleteParty mocks base method.
func (m *MockRepository) DeleteParty(ctx context.Context, partyId primitive.ObjectID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteParty", ctx, partyId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteParty indicates an expected call of DeleteParty.
func (mr *MockRepositoryMockRecorder) DeleteParty(ctx, partyId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteParty", reflect.TypeOf((*MockRepository)(nil).DeleteParty), ctx, partyId)
}

// DeletePartyInvite mocks base method.
func (m *MockRepository) DeletePartyInvite(ctx context.Context, partyId primitive.ObjectID, targetId uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePartyInvite", ctx, partyId, targetId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePartyInvite indicates an expected call of DeletePartyInvite.
func (mr *MockRepositoryMockRecorder) DeletePartyInvite(ctx, partyId, targetId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePartyInvite", reflect.TypeOf((*MockRepository)(nil).DeletePartyInvite), ctx, partyId, targetId)
}

// DoesPartyInviteExist mocks base method.
func (m *MockRepository) DoesPartyInviteExist(ctx context.Context, partyId primitive.ObjectID, playerId uuid.UUID) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DoesPartyInviteExist", ctx, partyId, playerId)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DoesPartyInviteExist indicates an expected call of DoesPartyInviteExist.
func (mr *MockRepositoryMockRecorder) DoesPartyInviteExist(ctx, partyId, playerId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DoesPartyInviteExist", reflect.TypeOf((*MockRepository)(nil).DoesPartyInviteExist), ctx, partyId, playerId)
}

// GetPartyById mocks base method.
func (m *MockRepository) GetPartyById(ctx context.Context, partyId primitive.ObjectID) (*model.Party, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPartyById", ctx, partyId)
	ret0, _ := ret[0].(*model.Party)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPartyById indicates an expected call of GetPartyById.
func (mr *MockRepositoryMockRecorder) GetPartyById(ctx, partyId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPartyById", reflect.TypeOf((*MockRepository)(nil).GetPartyById), ctx, partyId)
}

// GetPartyByMemberId mocks base method.
func (m *MockRepository) GetPartyByMemberId(ctx context.Context, playerId uuid.UUID) (*model.Party, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPartyByMemberId", ctx, playerId)
	ret0, _ := ret[0].(*model.Party)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPartyByMemberId indicates an expected call of GetPartyByMemberId.
func (mr *MockRepositoryMockRecorder) GetPartyByMemberId(ctx, playerId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPartyByMemberId", reflect.TypeOf((*MockRepository)(nil).GetPartyByMemberId), ctx, playerId)
}

// GetPartyIdByMemberId mocks base method.
func (m *MockRepository) GetPartyIdByMemberId(ctx context.Context, playerId uuid.UUID) (primitive.ObjectID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPartyIdByMemberId", ctx, playerId)
	ret0, _ := ret[0].(primitive.ObjectID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPartyIdByMemberId indicates an expected call of GetPartyIdByMemberId.
func (mr *MockRepositoryMockRecorder) GetPartyIdByMemberId(ctx, playerId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPartyIdByMemberId", reflect.TypeOf((*MockRepository)(nil).GetPartyIdByMemberId), ctx, playerId)
}

// GetPartyInvitesByPartyId mocks base method.
func (m *MockRepository) GetPartyInvitesByPartyId(ctx context.Context, partyId primitive.ObjectID) ([]*model.PartyInvite, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPartyInvitesByPartyId", ctx, partyId)
	ret0, _ := ret[0].([]*model.PartyInvite)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPartyInvitesByPartyId indicates an expected call of GetPartyInvitesByPartyId.
func (mr *MockRepositoryMockRecorder) GetPartyInvitesByPartyId(ctx, partyId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPartyInvitesByPartyId", reflect.TypeOf((*MockRepository)(nil).GetPartyInvitesByPartyId), ctx, partyId)
}

// GetPartyLeaderByPartyId mocks base method.
func (m *MockRepository) GetPartyLeaderByPartyId(ctx context.Context, partyId primitive.ObjectID) (uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPartyLeaderByPartyId", ctx, partyId)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPartyLeaderByPartyId indicates an expected call of GetPartyLeaderByPartyId.
func (mr *MockRepositoryMockRecorder) GetPartyLeaderByPartyId(ctx, partyId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPartyLeaderByPartyId", reflect.TypeOf((*MockRepository)(nil).GetPartyLeaderByPartyId), ctx, partyId)
}

// GetPartyLeaderIdByMemberId mocks base method.
func (m *MockRepository) GetPartyLeaderIdByMemberId(ctx context.Context, playerId uuid.UUID) (uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPartyLeaderIdByMemberId", ctx, playerId)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPartyLeaderIdByMemberId indicates an expected call of GetPartyLeaderIdByMemberId.
func (mr *MockRepositoryMockRecorder) GetPartyLeaderIdByMemberId(ctx, playerId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPartyLeaderIdByMemberId", reflect.TypeOf((*MockRepository)(nil).GetPartyLeaderIdByMemberId), ctx, playerId)
}

// GetPartySettings mocks base method.
func (m *MockRepository) GetPartySettings(ctx context.Context, playerId uuid.UUID) (*model.PartySettings, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPartySettings", ctx, playerId)
	ret0, _ := ret[0].(*model.PartySettings)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPartySettings indicates an expected call of GetPartySettings.
func (mr *MockRepositoryMockRecorder) GetPartySettings(ctx, playerId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPartySettings", reflect.TypeOf((*MockRepository)(nil).GetPartySettings), ctx, playerId)
}

// HealthCheck mocks base method.
func (m *MockRepository) HealthCheck(ctx context.Context, timeout time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HealthCheck", ctx, timeout)
	ret0, _ := ret[0].(error)
	return ret0
}

// HealthCheck indicates an expected call of HealthCheck.
func (mr *MockRepositoryMockRecorder) HealthCheck(ctx, timeout interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HealthCheck", reflect.TypeOf((*MockRepository)(nil).HealthCheck), ctx, timeout)
}

// IsInParty mocks base method.
func (m *MockRepository) IsInParty(ctx context.Context, playerId uuid.UUID) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsInParty", ctx, playerId)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsInParty indicates an expected call of IsInParty.
func (mr *MockRepositoryMockRecorder) IsInParty(ctx, playerId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsInParty", reflect.TypeOf((*MockRepository)(nil).IsInParty), ctx, playerId)
}

// RemoveMemberFromParty mocks base method.
func (m *MockRepository) RemoveMemberFromParty(ctx context.Context, partyId primitive.ObjectID, playerId uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveMemberFromParty", ctx, partyId, playerId)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveMemberFromParty indicates an expected call of RemoveMemberFromParty.
func (mr *MockRepositoryMockRecorder) RemoveMemberFromParty(ctx, partyId, playerId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveMemberFromParty", reflect.TypeOf((*MockRepository)(nil).RemoveMemberFromParty), ctx, partyId, playerId)
}

// RemoveMemberFromSelfParty mocks base method.
func (m *MockRepository) RemoveMemberFromSelfParty(ctx context.Context, playerId uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveMemberFromSelfParty", ctx, playerId)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveMemberFromSelfParty indicates an expected call of RemoveMemberFromSelfParty.
func (mr *MockRepositoryMockRecorder) RemoveMemberFromSelfParty(ctx, playerId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveMemberFromSelfParty", reflect.TypeOf((*MockRepository)(nil).RemoveMemberFromSelfParty), ctx, playerId)
}

// SetPartyLeader mocks base method.
func (m *MockRepository) SetPartyLeader(ctx context.Context, partyId primitive.ObjectID, leaderId uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetPartyLeader", ctx, partyId, leaderId)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetPartyLeader indicates an expected call of SetPartyLeader.
func (mr *MockRepositoryMockRecorder) SetPartyLeader(ctx, partyId, leaderId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetPartyLeader", reflect.TypeOf((*MockRepository)(nil).SetPartyLeader), ctx, partyId, leaderId)
}

// UpdatePartySettings mocks base method.
func (m *MockRepository) UpdatePartySettings(ctx context.Context, settings *model.PartySettings) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePartySettings", ctx, settings)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePartySettings indicates an expected call of UpdatePartySettings.
func (mr *MockRepositoryMockRecorder) UpdatePartySettings(ctx, settings interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePartySettings", reflect.TypeOf((*MockRepository)(nil).UpdatePartySettings), ctx, settings)
}
