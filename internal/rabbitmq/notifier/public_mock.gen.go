// Code generated by MockGen. DO NOT EDIT.
// Source: internal/rabbitmq/notifier/public.go

// Package notifier is a generated GoMock package.
package notifier

import (
	context "context"
	model "party-manager/internal/repository/model"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
	primitive "go.mongodb.org/mongo-driver/bson/primitive"
)

// MockNotifier is a mock of Notifier interface.
type MockNotifier struct {
	ctrl     *gomock.Controller
	recorder *MockNotifierMockRecorder
}

// MockNotifierMockRecorder is the mock recorder for MockNotifier.
type MockNotifierMockRecorder struct {
	mock *MockNotifier
}

// NewMockNotifier creates a new mock instance.
func NewMockNotifier(ctrl *gomock.Controller) *MockNotifier {
	mock := &MockNotifier{ctrl: ctrl}
	mock.recorder = &MockNotifierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNotifier) EXPECT() *MockNotifierMockRecorder {
	return m.recorder
}

// HealthCheck mocks base method.
func (m *MockNotifier) HealthCheck(ctx context.Context, timeout time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HealthCheck", ctx, timeout)
	ret0, _ := ret[0].(error)
	return ret0
}

// HealthCheck indicates an expected call of HealthCheck.
func (mr *MockNotifierMockRecorder) HealthCheck(ctx, timeout interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HealthCheck", reflect.TypeOf((*MockNotifier)(nil).HealthCheck), ctx, timeout)
}

// PartyCreated mocks base method.
func (m *MockNotifier) PartyCreated(ctx context.Context, party *model.Party) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "PartyCreated", ctx, party)
}

// PartyCreated indicates an expected call of PartyCreated.
func (mr *MockNotifierMockRecorder) PartyCreated(ctx, party interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PartyCreated", reflect.TypeOf((*MockNotifier)(nil).PartyCreated), ctx, party)
}

// PartyEmptied mocks base method.
func (m *MockNotifier) PartyEmptied(ctx context.Context, party *model.Party) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "PartyEmptied", ctx, party)
}

// PartyEmptied indicates an expected call of PartyEmptied.
func (mr *MockNotifierMockRecorder) PartyEmptied(ctx, party interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PartyEmptied", reflect.TypeOf((*MockNotifier)(nil).PartyEmptied), ctx, party)
}

// PartyInviteCreated mocks base method.
func (m *MockNotifier) PartyInviteCreated(ctx context.Context, invite *model.PartyInvite) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "PartyInviteCreated", ctx, invite)
}

// PartyInviteCreated indicates an expected call of PartyInviteCreated.
func (mr *MockNotifierMockRecorder) PartyInviteCreated(ctx, invite interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PartyInviteCreated", reflect.TypeOf((*MockNotifier)(nil).PartyInviteCreated), ctx, invite)
}

// PartyLeaderChanged mocks base method.
func (m *MockNotifier) PartyLeaderChanged(ctx context.Context, partyId primitive.ObjectID, newLeader *model.PartyMember) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "PartyLeaderChanged", ctx, partyId, newLeader)
}

// PartyLeaderChanged indicates an expected call of PartyLeaderChanged.
func (mr *MockNotifierMockRecorder) PartyLeaderChanged(ctx, partyId, newLeader interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PartyLeaderChanged", reflect.TypeOf((*MockNotifier)(nil).PartyLeaderChanged), ctx, partyId, newLeader)
}

// PartyPlayerJoined mocks base method.
func (m *MockNotifier) PartyPlayerJoined(ctx context.Context, partyId primitive.ObjectID, player *model.PartyMember) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "PartyPlayerJoined", ctx, partyId, player)
}

// PartyPlayerJoined indicates an expected call of PartyPlayerJoined.
func (mr *MockNotifierMockRecorder) PartyPlayerJoined(ctx, partyId, player interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PartyPlayerJoined", reflect.TypeOf((*MockNotifier)(nil).PartyPlayerJoined), ctx, partyId, player)
}

// PartyPlayerKicked mocks base method.
func (m *MockNotifier) PartyPlayerKicked(ctx context.Context, partyId primitive.ObjectID, kicked, kicker *model.PartyMember) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "PartyPlayerKicked", ctx, partyId, kicked, kicker)
}

// PartyPlayerKicked indicates an expected call of PartyPlayerKicked.
func (mr *MockNotifierMockRecorder) PartyPlayerKicked(ctx, partyId, kicked, kicker interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PartyPlayerKicked", reflect.TypeOf((*MockNotifier)(nil).PartyPlayerKicked), ctx, partyId, kicked, kicker)
}

// PartyPlayerLeft mocks base method.
func (m *MockNotifier) PartyPlayerLeft(ctx context.Context, partyId primitive.ObjectID, player *model.PartyMember) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "PartyPlayerLeft", ctx, partyId, player)
}

// PartyPlayerLeft indicates an expected call of PartyPlayerLeft.
func (mr *MockNotifierMockRecorder) PartyPlayerLeft(ctx, partyId, player interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PartyPlayerLeft", reflect.TypeOf((*MockNotifier)(nil).PartyPlayerLeft), ctx, partyId, player)
}

// PartySettingsChanged mocks base method.
func (m *MockNotifier) PartySettingsChanged(ctx context.Context, playerId uuid.UUID, settings *model.PartySettings) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "PartySettingsChanged", ctx, playerId, settings)
}

// PartySettingsChanged indicates an expected call of PartySettingsChanged.
func (mr *MockNotifierMockRecorder) PartySettingsChanged(ctx, playerId, settings interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PartySettingsChanged", reflect.TypeOf((*MockNotifier)(nil).PartySettingsChanged), ctx, playerId, settings)
}
